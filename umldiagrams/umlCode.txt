--------------------
UseCase Diagram 
--------------------

@startuml
actor "Пользователь" as user
user-->(Сохр./Загр. \n примера из БД)
user-->(Добавл./Удал. \n источника данных \n из примера)
user-->(Построение \n графиков примера)
user-->(Экспорт \n построенных графиков \n в нужный формат)
@enduml

--------------------
Class Diagram
--------------------

-- a) Data-Controller

@startuml
class Data {}
hide Data members

class ExpData{
  -id: int 
  +data: Data
} 
hide ExpData method

class DataList {
  -DataList: ExpData[]
  +addData(Data): void
  +removeData(): void
}

class Controller {}
hide Controller members

class Case {
  +dataList: DataList
}
hide Case method


Controller -- ExpData
Controller -- DataList


ExpData "*" --o "1" DataList
DataList --* "1" Case
Data --* "1"  ExpData
@enduml


-- b) DB-AppUtils-Controller

@startuml
class Controller {}
hide Controller members

class Database {
  +readFromDatabase(): DAO
  +writeToDatabase(DAO): void
}
hide Database fields

class DAO {}
hide DAO members

class ApplicationUtils <<static>> {
  +readDataFromFile(): DTO
  +readApplictaionSettings(): void
}
hide ApplicationUtils fields

class DTO {}
hide DTO members


Controller "1" o-- Database
(Controller, ApplicationUtils) . DTO
(Controller, Database) . DAO
@enduml


-- c) Case-Operaion-Controller

@startuml
class Case {
  -id: int
  +dataList: DataList
  +operationHistory: OperationHistory
}
hide Case method

interface Operation {
  +execute(): void
}
hide Operation fields

class Operation1 {
  -params
  +Operation1(params)
  +execute(): void 
}

class Operation2 {
  -params
  +Operation2(params)
  +execute(): void
}

class OperationInvoker {
  -opertaion
  +setOperation(Operation): void
  +executeOperation(): void
}

class OperationHistory {
  -history: Operation[]
  +push(Operation): void
  +pop(): Operation
}

class Controller {}
hide Controller members

Controller "1" o-- OperationInvoker
Controller "1" o-- Case
Controller -- OperationHistory

Operation --o "1" OperationInvoker
Operation <|.. Operation1
Operation <|.. Operation2
Operation "*" --o "1" OperationHistory

Case "1" *-- OperationHistory
@enduml


--------------------
Sequence diagram
--------------------

-- a) Построение графиков примера 

@startuml
participant Пользователь

Пользователь -> ":Controller" : построить графики
create ":OperationInvoker"
activate ":Controller"
":Controller" -> ":OperationInvoker" : инстанцировать
":Controller" -> ":OperationInvoker" : setOperation(Operation1 x)
activate ":OperationInvoker"
":Controller" -> ":OperationInvoker" : execute()
deactivate ":Controller"
":OperationInvoker" -> ":Operation1" : execute() Operation1
deactivate ":OperationInvoker"
activate ":Operation1"
":Operation1" --> ":Controller" : вернуть построенные графики
deactivate ":Operation1"
activate ":Controller"
":Controller" -> ":Case" : getOperationHistory()
deactivate ":Controller"
activate ":Case"
":Case" --> ":Controller" : вернуть поле operationHistory
deactivate ":Case"
activate ":Controller"
":Controller" -> ":OperationHistory": push(Operation1 x)
activate ":OperationHistory"
":Controller" --> Пользователь : вернуть построенные графики
deactivate ":Controller"
deactivate ":OperationHistory"
@enduml


-- b) Сохранение примера из базы данных

@startuml
Пользователь -> ":Controller" : сохранить пример
activate ":Controller"
":Controller" -> ":Case" : getCase() 
activate ":Case" 
":Case" --> ":Controller" : вернуть экземпляр Case
deactivate ":Case"
create ":DAO"
":Controller" -> ":DAO" : new DAO(case)
activate ":DAO"
":DAO" --> ":Controller" : вернуть экземпляр DAO
deactivate ":DAO"
destroy ":DAO"
":Controller" -> ":Database" : writeToDatabase(dataFromDAO)
activate ":Database"
deactivate ":Controller"
":Database" --> Пользователь : запись завершена
deactivate ":Database"
@enduml


-- c) Чтение экспериментальных данных

@startuml
Пользователь -> ":Controller" : добавить данные
activate ":Controller"
":Controller" -> ":ApplicationUtils" : readDataFromFile() 
activate ":ApplicationUtils"
deactivate ":Controller"
create ":DTO"
":ApplicationUtils" -> ":DTO" : new DTO(dataFromFile)
activate ":DTO"
deactivate ":ApplicationUtils"
":DTO" --> ":Controller" : вернуть DTO
deactivate ":DTO"
activate ":Controller"
create ":ExpData"
":Controller" -> ":ExpData" : new ExpData(dataFromDTO)
activate ":ExpData"
deactivate ":Controller"
destroy ":DTO"
":ExpData" --> ":Controller" : вернуть экземпляр ExpData
activate ":Controller"
deactivate ":ExpData"
":Controller" -> ":Case" : getDataList()
activate ":Case"
":Case" --> ":Controller" : вернуть поле dataList
deactivate ":Case"
":Controller" -> ":DataList" : addData(ExpData)
deactivate ":Controller"
activate ":DataList"
":DataList" --> Пользователь : данные добавленны
deactivate ":DataList"
@enduml



