--------------------
UseCase Diagram 
--------------------
new 
______________________________________________
@startuml
actor "Пользователь" as user
user-->(Сохр./Загр. \n примера из БД)
user-->(Добавл./Удал. \n источника данных \n из примера)
user-->(Построение \n графиков примера)
user-->(Редактирвоание \n угла обзора \n графиков)
@enduml

old
__________________________________________
@startuml
actor "Пользователь" as user
user-->(Сохр./Загр. \n примера из БД)
user-->(Добавл./Удал. \n источника данных \n из примера)
user-->(Построение \n графиков примера)
user-->(Экспорт \n построенных графиков \n в нужный формат)
@enduml

--------------------
Class Diagram
--------------------
old ver
_________________________________________

--------------------------------------------------- a) Data-Controller, model

@startuml
class Data {}
hide Data members

class ExpData{
  -id: int 
  +data: Data
} 
hide ExpData method

class DataList {
  -DataList: ExpData[]
  +addData(Data): void
  +removeData(): void
}

class Controller {}
hide Controller members

class Case {
  +dataList: DataList
}
hide Case method


Controller -- ExpData
Controller -- DataList


ExpData "*" --o "1" DataList
DataList --* "1" Case
Data --* "1"  ExpData
@enduml

new ver
___________________________
@startuml
class Point{
  +x: float
  +y: float
  +z: float
}


class CameraProps{
  +idn: int
  +name: str
  +focal_point: Point
  +cam_position: Point
  +viewup: Point
  +viewangle: float
}

class CasesDir{
  +idn: int
  +path: Path
}

class FoamCase{
  +idn: int
  +name: str
  +cases_dir: CaseDir
  +cam_prop_list: List[CameraoProps]
}

class Controller {}
hide Controller members

class SharedState {
  +case_list: List[FoamCase]
  +state1
  +state2
  + ...
}


Controller -- FoamCase
SharedState --o Controller

Point -- CameraProps
FoamCase "*" --o "1" SharedState
CasesDir "1" --* "1" FoamCase
CameraProps "*" --* "1" FoamCase
@enduml

-------------------------------------------- b) DB-AppUtils-Controller, dao
new
______________________________________
@startuml
abstract class DaoFactory{
    - DBConnection _get_connection()
    + AbstractDAO get_dao(connection, dao_class)
}

class MongoDaoFactory {
    - LOGIN
    - PASSWORD
    - MongoDBConnection MongoDBConnection _get_connection()
    + MongoAbstractDAO MongoDget_dao(connection, dao_class)
}

class Config {}
hide Config members


class Controller {}
hide Controller members

abstract class AbstractDAO{
    +connection
    +Any create(obj)
    +Any create_or_update(obj)
    +Any read(key)
    +Any update(obj)
    +Any delete(key)
    +List[Any] get_all()
}

abstract class MongoAbstractDAO{
    +Any delete(key): implemented
    +Any get_all(): implemented
}

class MongoFoamCaseDAO{}
hide MongoFoamCaseDAO members

class MongoCaseDirDAO{}
hide MongoCaseDirDAO members

class MongoCameraPropsDAO{}
hide MongoCameraPropsDAO members


DaoFactory <|-- MongoDaoFactory
Config ..> MongoDaoFactory: inject LOGIN, PASSWORD
Controller -- DaoFactory
Controller -- AbstractDAO
DaoFactory --> AbstractDAO
AbstractDAO <|-- MongoAbstractDAO
MongoAbstractDAO <|--MongoFoamCaseDAO
MongoAbstractDAO <|--MongoCaseDirDAO
MongoAbstractDAO <|--MongoCameraPropsDAO
@enduml

old
____________________________

@startuml
class Controller {}
hide Controller members

class Database {
  +readFromDatabase(): DAO
  +writeToDatabase(DAO): void
}
hide Database fields

class DAO {}
hide DAO members

class ApplicationUtils <<static>> {
  +readDataFromFile(): DTO
  +readApplictaionSettings(): void
}
hide ApplicationUtils fields

class DTO {}
hide DTO members


Controller "1" o-- Database
(Controller, ApplicationUtils) . DTO
(Controller, Database) . DAO
@enduml


----------------------------------------------------------------------------- c) Case-Operaion-Controller, view
new
____________________________________
@startuml
class ControlList {
+on_add_button_clicked()
+on_rm_button_clicked
+on_item_selection
+header
+list_

}

class TextEdit {
   + label
   + text_edit
   some callbacks ...
}
class PointTextEdit{}
hide PointTextEdit members
class CameraParamsForm {}
hide CameraParamsForm members
class Button {}
hide Button members
class SaveResetButtonGroup {}
hide SaveResetButtonGroup members
class MainWidget {}
hide MainWidget members
class Controller {}
hide Controller members


MainWidget o-- SaveResetButtonGroup
MainWidget o-- Button
MainWidget o-- TextEdit
MainWidget o-- CameraParamsForm
CameraParamsForm o-- PointTextEdit
CameraParamsForm o-- ControlList
Controller -- MainWidget
Controller -- CameraParamsForm
@enduml

old
________________________________
@startuml
class Case {
  -id: int
  +dataList: DataList
  +operationHistory: OperationHistory
}
hide Case method

interface Operation {
  +execute(): void
}
hide Operation fields

class Operation1 {
  -params
  +Operation1(params)
  +execute(): void 
}

class Operation2 {
  -params
  +Operation2(params)
  +execute(): void
}

class OperationInvoker {
  -opertaion
  +setOperation(Operation): void
  +executeOperation(): void
}

class OperationHistory {
  -history: Operation[]
  +push(Operation): void
  +pop(): Operation
}

class Controller {}
hide Controller members

Controller "1" o-- OperationInvoker
Controller "1" o-- Case
Controller -- OperationHistory

Operation --o "1" OperationInvoker
Operation <|.. Operation1
Operation <|.. Operation2
Operation "*" --o "1" OperationHistory

Case "1" *-- OperationHistory
@enduml


--------------------
Sequence diagram
--------------------

------------------------------------------------------------------------------ a) Построение графиков примера 
new _______________________________________________________________________
@startuml
participant Пользователь

Пользователь -> ":Controller" : построить графики
create ":Screenshot"
activate ":Controller"
":Controller" -> ":Screenshot" : обратиться к классу
":Controller" -> ":Screenshot" : take_screenshot(cases_list, output)
activate ":Screenshot"
deactivate ":Controller"
":Screenshot" -> ":FoamCase" : get_data()
activate ":FoamCase"
":FoamCase" --> ":Screenshot" : вернуть data
deactivate ":FoamCase"
":Screenshot" -> ":ParaView" : set_data()
activate ":ParaView"
":Screenshot" -> ":ParaView" : show()
":ParaView" -> ":Screenshot" : вернуть графики
":Screenshot" -> ":ParaView": сохранить графики
deactivate ":Screenshot"
":ParaView" -> Пользователь: вернуть файлы с построенными графиками
deactivate ":ParaView"
@enduml


old _______________________________________________________________________
@startuml
participant Пользователь

Пользователь -> ":Controller" : построить графики
create ":OperationInvoker"
activate ":Controller"
":Controller" -> ":OperationInvoker" : инстанцировать
":Controller" -> ":OperationInvoker" : setOperation(Operation1 x)
activate ":OperationInvoker"
":Controller" -> ":OperationInvoker" : execute()
deactivate ":Controller"
":OperationInvoker" -> ":Operation1" : execute() Operation1
deactivate ":OperationInvoker"
activate ":Operation1"
":Operation1" --> ":Controller" : вернуть построенные графики
deactivate ":Operation1"
activate ":Controller"
":Controller" -> ":Case" : getOperationHistory()
deactivate ":Controller"
activate ":Case"
":Case" --> ":Controller" : вернуть поле operationHistory
deactivate ":Case"
activate ":Controller"
":Controller" -> ":OperationHistory": push(Operation1 x)
activate ":OperationHistory"
":Controller" --> Пользователь : вернуть построенные графики
deactivate ":Controller"
deactivate ":OperationHistory"
@enduml




---------------------------------------------------------------------------------- b) Сохранение примера из базы данных
new
______________________________________________-
@startuml
Пользователь -> ":Controller" : сохранить пример
":Controller" -> ":MongoDaoFactory" : get_dao() 
activate ":MongoDaoFactory"
":MongoDaoFactory" -> ":Controller" : инстанцировать и вернуть экземпляр MongoFoamCaseDAO
deactivate ":MongoDaoFactory"
":Controller" -> ":MongoFoamCaseDAO": create_or_update(case)
activate ":MongoFoamCaseDAO"
":MongoFoamCaseDAO" -> ":Controller": успех
deactivate ":MongoFoamCaseDAO"
":Controller" -> Пользователь: запись завершена
deactivate ":Controller"
@enduml
old
______________________________________________

@startuml
Пользователь -> ":Controller" : сохранить пример
activate ":Controller"
":Controller" -> ":Case" : getCase() 
activate ":Case" 
":Case" --> ":Controller" : вернуть экземпляр Case
deactivate ":Case"
create ":DAO"
":Controller" -> ":DAO" : new DAO(case)
activate ":DAO"
":DAO" --> ":Controller" : вернуть экземпляр DAO
deactivate ":DAO"
destroy ":DAO"
":Controller" -> ":Database" : writeToDatabase(dataFromDAO)
activate ":Database"
deactivate ":Controller"
":Database" --> Пользователь : запись завершена
deactivate ":Database"
@enduml


------------------------------------------------------------------ c) Чтение/добавление экспериментальных данных
new
_______________________________________________________
@startuml
Пользователь -> ":Controller" : добавить данные
activate ":Controller"
":Controller" -> ":CasesDir" : инстанцирует casesdir
":CasesDir" -> ":Controller" : возвращает casesdir
":Controller" -> ":FoamCase" : инстанцирует foamcase(casedir)
activate ":FoamCase"
":FoamCase" -> ":Controller" : возвращает foamcase
deactivate ":FoamCase"
":Controller" -> ":SharedState" : case_list().append(foamcase)
activate ":SharedState"
":SharedState" -> ":Controller" : успех
deactivate ":SharedState"
":Controller" -> Пользователь : add_item(foamcase.name)
deactivate ":FoamCase"
deactivate ":CasesDir"
":Controller" -> ":SharedState" : get_selected_case() 
activate ":SharedState"
":SharedState" -> ":Controller" : возвращает выбранный foamcase
deactivate ":SharedState"
":Controller" -> ":CameraProps" : инстанцирует camprop
activate ":CameraProps"
":CameraProps" -> ":Controller" : возвращает экземпляр camprop
deactivate ":CameraProps"
":Controller" -> ":SharedState" : foamcase.cam_prop_list.append(camprop)
activate ":SharedState"
":SharedState" -> ":Controller" : успех
deactivate ":SharedState"
":Controller" -> Пользователь : add_item(foamcase.name)
deactivate ":Controller"
@enduml


old
______________________________________________________________________
@startuml
Пользователь -> ":Controller" : добавить данные
activate ":Controller"
":Controller" -> ":ApplicationUtils" : readDataFromFile() 
activate ":ApplicationUtils"
deactivate ":Controller"
create ":DTO"
":ApplicationUtils" -> ":DTO" : new DTO(dataFromFile)
activate ":DTO"
deactivate ":ApplicationUtils"
":DTO" --> ":Controller" : вернуть DTO
deactivate ":DTO"
activate ":Controller"
create ":ExpData"
":Controller" -> ":ExpData" : new ExpData(dataFromDTO)
activate ":ExpData"
deactivate ":Controller"
destroy ":DTO"
":ExpData" --> ":Controller" : вернуть экземпляр ExpData
activate ":Controller"
deactivate ":ExpData"
":Controller" -> ":Case" : getDataList()
activate ":Case"
":Case" --> ":Controller" : вернуть поле dataList
deactivate ":Case"
":Controller" -> ":DataList" : addData(ExpData)
deactivate ":Controller"
activate ":DataList"
":DataList" --> Пользователь : данные добавленны
deactivate ":DataList"
@enduml





